#!/usr/bin/env sh
VERSION="0.2"

# Color functions using tput
red() { tput setaf 1; printf "%s" "$*"; tput sgr0; }
green() { tput setaf 2; printf "%s" "$*"; tput sgr0; }
yellow() { tput setaf 3; printf "%s" "$*"; tput sgr0; }
blue() { tput setaf 4; printf "%s" "$*"; tput sgr0; }
magenta() { tput setaf 5; printf "%s" "$*"; tput sgr0; }
cyan() { tput setaf 6; printf "%s" "$*"; tput sgr0; }

version() {
  cyan "gh-emergency version $VERSION\n"
  git --version
  gh version
}

current_branch() {
  basename "$(git symbolic-ref HEAD)"
}

current_epoch() {
  date +%s
}

user_email() {
  git config user.email
}

new_branch() {
  echo "emergency-${1:-$(current_branch)}-$(current_epoch)"
}

emergency() {
  initial_branch="$(current_branch)"
  new_branch_name="emergency-$(current_epoch)-$(echo "$initial_branch" | tr '[:upper:]' '[:lower:]' | tr '/' '-')"
  
  git checkout -b "$new_branch_name" >> emergency.log 2>&1
  if [ $? -ne 0 ]; then
    red "Failed to create new branch. Check emergency.log for details."
    exit 1
  fi
  
  cd "$(git rev-parse --show-toplevel)" >> emergency.log 2>&1
  if [ $? -ne 0 ]; then
    red "Failed to navigate to git root directory. Check emergency.log for details."
    exit 1
  fi
  
  git add -A >> emergency.log 2>&1
  if [ $? -ne 0 ]; then
    red "Failed to stage changes. Check emergency.log for details."
    exit 1
  fi
  
  if [ -z "$1" ]; then
    message="EMERGENCY($(user_email)): [$(current_branch)] Emergency commit at $(date +"%Y-%m-%d %H:%M:%S")"
  else
    message="EMERGENCY($(user_email)): [$(current_branch)] $*"
  fi
  git commit -m "$message" --no-verify >> emergency.log 2>&1
  if [ $? -ne 0 ]; then
    red "Failed to create commit. Check emergency.log for details."
    exit 1
  fi
  
  remotes=$(git remote)
  if [ -z "$remotes" ]; then
    yellow "No remotes found. Changes will only be saved locally." | tee -a emergency.log
    push_success=false
  else
    push_success=true
    for remote in $remotes; do
      blue "Pushing to remote: $remote"
      git push --no-verify --set-upstream "${remote}" "$new_branch_name" >> emergency.log 2>&1
      if [ $? -ne 0 ]; then
        red "Failed to push to remote: $remote. Check emergency.log for details." | tee -a emergency.log
        push_success=false
      else
        green "Successfully pushed to remote: $remote"
      fi
    done
  fi
  
  if [ "$(git stash list)" != '' ]; then
    for sha in $(git rev-list -g stash); do
      git push --no-verify origin "$sha":refs/heads/"$(current_branch $initial_branch)"-stash-"$sha" >> emergency.log 2>&1
    done
  fi
  
  if $push_success; then
    printf "\n"; green "Emergency handled! Changes pushed to branch: $new_branch_name\n"
  else
    printf "\n"; yellow "Emergency partially handled. Some pushes failed or no remotes found. Check emergency.log for details.\n"
  fi
}

display_help() {
  cat <<-EOF
$(cyan "Emergence extension for your code")
$(yellow "gh emergency") [<message>] 
$(green "Add, commit, and push to remote in case of emergency")
$(red "VERSION $VERSION")

usage:
  $(magenta "gh emergency [<message>]")       Add, commit, and push to remote in case of emergency
options:
  $(magenta "-V, --version")                   Output current version of gh-emergency
  $(magenta "-h, --help")                      Display this help information
EOF
}

case $1 in
  -v | --version)  version;       exit 0 ;;
  -h | --help)     display_help;  exit 0 ;;
  *)               emergency "$@" ;;
esac